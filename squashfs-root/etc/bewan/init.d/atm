#!/bin/sh
# /etc/bewan/init.d/atm $1
# $1 or $ARG = start stop restart
# $2 or $ETHID = ATM interface index

if [ "${ARG:-}" = "" ]; then
  . /etc/bewan/init.d/setparam
fi

. /etc/bewan/lib/atm

ETHID=${ETHID:-}
if [ "$ETHID" = '' ]; then
  ETHID=${2:-0}
fi

check_atm() {
  if ! check_vendor_atm; then
    ARG=nothing
    return
  fi
  local dsl=${WANDSLInterfaceConfig_Enable:-0}
  local en; eval en=\${$config'_Enable'}
  local enable="test x$en = x1 -a x$dsl = x1"
  local active="test -d $ATMD/$ifname"
  base_check_arg "$enable" "$active"
}

stop_atm() {
  # Call BSP library 
  stop_vendor_atm
  rm -rf $ATMD/$ifname
}

start_atm() {
  mkdir -p $ATMD/$ifname

  # VC is stored in the format vpi.vci
  local vc; eval vc=\${$config'_VC'}
  local aalprio; eval aalprio=\${$config'_AALPrio'}
  vc=`echo $vc | sed -e "s~/~.~"`
  echo $vc >$ATMD/$ifname/atmvc
  echo $aalprio >$ATMD/$ifname/aalprio

  # ATM encapsulation is stored int the format llc-encaps/vc-encaps
  local encaps; eval encaps=\${$config'_ATMEncapsulation'}
  if [ "$encaps" = 'VCMUX' ]; then
    encaps='vc-encaps'
  else
    encaps='llc-encaps'
  fi
  echo $encaps >$ATMD/$ifname/encaps

  # For upper layers Protocol is always Ethernet over ATM
  # unless PPP over ATM is selected
  local proto; eval proto=\${$config'_LinkType'}

  # PPP over ATM does not create a network interface
  # But is managed directly by the stack
  # pppd / pppoatm.so / pppoatm.ko / ATM kernel modules
  if [ "$proto" = PPPoA ]; then
    # Save VC and encapsulation
    echo "$vc $encaps" >$ATMD/$ifname/pppoa
  fi

  # Other encapsulations create a network interface
  # The way to do it depends on BSP
  start_vendor_atm
}

main_atm() {
  eval $PUSH_ARG

  local ifname; eval ifname=\${'ATMEthernetInterface_'$ETHID'_Ifname'}
  local config='ATMEthernetInterface_'$ETHID'_ATMLinkConfig'

  check_atm
  base_log "$INITD/atm $ARG $ETHID" debug

  case $ARG in
  stop)
    stop_atm
    ;;
  start)
    start_atm
    ;;
  restart)
    stop_atm
    start_atm
    ;;
  esac
}

main_atm
