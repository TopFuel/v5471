#!/bin/sh
# /etc/bewan/init.d/modem $1 $2
# $1 or $ARG = start stop restart
# $2 or $MDMID = ModemInterface index


if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

MDMID=${MDMID:-}
if [ "$MDMID" = '' ]; then
  MDMID=${2:-0}
fi

eval DEBUG=\${'ModemInterface_'$MDMID'_Debug':-0}

# Include library functions
. /etc/bewan/lib/modem

# Sanity check
check_modem() {

  local enable="test x$en = x1"
  local active="test -d $MODEMD/$MDMID"
  base_check_arg "$enable" "$active"
}

stop_modem() {

  [ "$DEBUG" != 0 ] && base_log "stop_modem" debug
  local ifname=`cat $MODEMD/$MDMID/ifname`
  if [ "$TOP_ARG" = restart ]; then
    # Stop associated WAN
    if [ -f /etc/bewan/lib/wan ]; then
      . /etc/bewan/lib/wan
      stop_wan_from_physical_interface $ifname
    fi
  fi
  rm -rf $MODEMD/$MDMID
  rm -f  /var/status/modem_3G_status
  [ "$DEBUG" != 0 ] && base_log_noconsole "modem $MDMID stopped." debug
  # Call modem3g script to treat stop statment
  # Add CMD, because in modem3g ARG is used instead of $1
  # Add parenthesis because the call to modem3g stop the end of the process
  (CMD=stop . /etc/bewan/scripts/modem3g stop $MDMID)
}

start_modem() {

  [ "$DEBUG" != 0 ] && base_log "start_modem" debug
  local hotmodem3G=/var/bewan/hotmdm.d/key_3G
  
  if [ -d $hotmodem3G ]; then 
	local product="`ls $hotmodem3G | grep prod `"
  else
	local product=""
  fi

  #No device plug
  [ "$product" = '' ] && return

  # Check modem name against allowed keys
  local prods; eval prods=\${'ModemInterface_'$MDMID'_AllowedProducts'}
  if [ "$prods" != '' ]; then
	local name=''
	for name in `strip $prods`; do
		[ $name = $product ] && break
	done
	# Modem name not found -> give-up
	[ $name != $product ] && return
  fi

  mkdir -p $MODEMD/$MDMID
  cp $hotmodem3G/* /$MODEMD/$MDMID

  # Create configuration parameters
  [ "$DEBUG" != 0 ] && base_log "Create configuration parameters" debug
  local number; eval number=\${'ModemInterface_'$MDMID'_PhoneNumber'}
  echo $number >$MODEMD/$MDMID/phone_number
  local pin; eval pin=\${'ModemInterface_'$MDMID'_PINCode'}
  echo $pin >$MODEMD/$MDMID/pincode
  local apn; eval apn=\${'ModemInterface_'$MDMID'_APN'}
  echo $apn >$MODEMD/$MDMID/apn
  local cgdcont; eval cgdcont=\${'ModemInterface_'$MDMID'_CGDCONT'}
  echo $cgdcont >$MODEMD/$MDMID/cgdcont
  local modeperf; eval modeperf=\${'ModemInterface_'$MDMID'_ModePref'}
  echo $modeperf >$MODEMD/$MDMID/mode_perf
  local login; eval login=\${'ModemInterface_'$MDMID'_Username'}
  echo $login >$MODEMD/$MDMID/login
  local passwd; eval passwd=\${'ModemInterface_'$MDMID'_Password'}
  echo $passwd >$MODEMD/$MDMID/passwd

  echo $DEBUG >$MODEMD/$MDMID/debug

  # Start associated WAN
  if [ "$TOP_ARG" = restart ] && [ -f /etc/bewan/lib/wan ]; then
    [ "$DEBUG" != 0 ] && base_log "Start associated WAN" debug
    . /etc/bewan/lib/wan
    start_wan_from_physical_interface 'ModemInterface' $MDMID
  fi

  # If dongle have no control and status ttyUSBx
  if [ "`cat $MODEMD/$MDMID/iftcl`" = "NO-INFO" ]; then
      # Enter the Key status in a file for the ModemInterface field in CLI
      /etc/bewan/scripts/modem3g infos $MDMID
      [ "$DEBUG" != 0 ] && base_log "/etc/bewan/scripts/modem3g infos $MDMID" debug
  fi

}

if [ "$MDMID" = 'all' ] && ( [ $ARG = start ] || [ $ARG = stop ] ); then
  [ "$DEBUG" != 0 ] && base_log "Start all interfaces" debug
  # Start all interfaces
  MDMID=0; while [ $MDMID -lt ${ModemInterface_Count:-0} ]; do
    MDMID=$(($MDMID + 1))
    base_call_initd 'modem'
  done
  MDMID='all'
  return
fi

main_modem() {
  eval $PUSH_ARG

  local en; eval en=\${'ModemInterface_'$MDMID'_Enable':-0}

  check_modem

  base_log "$INITD/modem $ARG $MDMID" debug
  
  case $ARG in
  stop)
    stop_modem
    ;;
  start)
    start_modem
    ;;
  restart)
    stop_modem
    start_modem
    ;;
  esac
}

main_modem

