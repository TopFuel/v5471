#!/bin/sh
# /etc/bewan/init.d/fwrules $1
# $1 or $ARG = start stop restart
# $IPPROTO = ipv4 or ipv6 or nothing for both
# $NOIPT = 1, do not reload iptables

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

IPPROTO=${IPPROTO:-}
NOIPT=${NOIPT:-0}

# Include function restart_iptables
. /etc/bewan/lib/wan

[ -d /proc/sys/net/ipv4 ] && [ -f /etc/bewan/lib/ipv4_firewall_functions ] && . /etc/bewan/lib/ipv4_firewall_functions
[ -d /proc/sys/net/ipv6 ] && [ -f /etc/bewan/lib/ipv6_firewall_functions ] && . /etc/bewan/lib/ipv6_firewall_functions

# Sanity check
check_fwrules() {
  [ "$IPPROTO" = 'ipv4' ]  && check_fwrules_ipv4
  [ "$IPPROTO" = 'ipv6' ]  && check_fwrules_ipv6
}

stop_fwrules() {
  [ "$IPPROTO" = 'ipv4' ]  && stop_fwrules_ipv4
  [ "$IPPROTO" = 'ipv6' ]  && stop_fwrules_ipv6
}

start_fwrules() {
  local file
  [ "$IPPROTO" = 'ipv4' ]  && start_fwrules_ipv4
  [ "$IPPROTO" = 'ipv6' ]  && start_fwrules_ipv6

  # optimize netfilter hooks
  # If a bridge is detected, then we will enable nf-call-ipXtables in finalize_fwrules_ipvX
  for file in /proc/sys/net/bridge/bridge-nf-call-arptables /proc/sys/net/bridge/bridge-nf-call-iptables /proc/sys/net/bridge/bridge-nf-call-ip6tables /proc/sys/net/bridge/bridge-nf-filter-pppoe-tagged /proc/sys/net/bridge/bridge-nf-filter-vlan-tagged; do
    [ -f $file ] && echo 0 > $file
  done

  local bridge_nf=0
  local i
  for i in `strip $Firewall_Rules_List`; do

    local rule='Firewall_Rules_'$i
    local en; eval en=\${${rule}'_Enable'}
    [ "$en" != 1 ] && continue

    eval USER=\${${rule}'_User'}
    [ "$USER" = 1 ] && [ "$Firewall_UserEnable" != 1 ] && continue

    local ipproto; eval ipproto=\${${rule}'_IPProtocol'}

    case "$ipproto" in
    'IPv4'|'')
      [ "$IPPROTO" = 'ipv4' ] && add_fwrule_ipv4 $rule
    ;;
    'IPv6')
      [ "$IPPROTO" = 'ipv6' ] && add_fwrule_ipv6 $rule
    ;;
    'IPv4+IPv6')
      [ "$IPPROTO" = 'ipv4' ] && add_fwrule_ipv4 $rule
      [ "$IPPROTO" = 'ipv6' ] && add_fwrule_ipv6 $rule
    ;;
    esac
  done # rule list

  [ "$IPPROTO" = 'ipv4' ]  && finalize_fwrules_ipv4
  [ "$IPPROTO" = 'ipv6' ]  && finalize_fwrules_ipv6
}

main_fwrules() {
  eval $PUSH_ARG
  local IPPROTO=$1

  check_fwrules
  base_log "$INITD/fwrules $IPPROTO $ARG" debug

  case $ARG in
  stop)
    stop_fwrules
    ;;
  start)
    start_fwrules
    ;;
  restart)
    stop_fwrules
    start_fwrules
    ;;
  esac
}

main_fwrules_all() {
  eval $PUSH_ARG
  case "$IPPROTO" in
    ipv4)
      [ ${IPV4_FIREWALL_LIB:-0} = 1 ] && main_fwrules ipv4
      [ "$TOP_ARG" = restart ] && restart_iptables
    ;;
    ipv6)
      [ ${IPV6_FIREWALL_LIB:-0} = 1 ] && main_fwrules ipv6
      [ "$TOP_ARG" = restart ] && restart_iptables
    ;;
    '')
      [ ${IPV4_FIREWALL_LIB:-0} = 1 ] && main_fwrules ipv4
      [ ${IPV6_FIREWALL_LIB:-0} = 1 ] && main_fwrules ipv6
      [ "$TOP_ARG" = restart ] && restart_iptables
    ;;
  esac
}

main_fwrules_all
