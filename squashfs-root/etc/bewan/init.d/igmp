#!/bin/sh
# /etc/bewan/init.d/igmp $1
# $1 or $ARG = start stop restart

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

build_igmp_configfile()
{
  mkdir -p $dir
  rm -f $conf
  # Quick leave mode
  if [ "$Services_IgmpProxy_QuickLeave" = 1 ]; then
    echo 'quickleave' >>$conf
  fi
  # Default allow option for WAN Forwarding
  echo "maxGroups $Services_IgmpProxy_MaxGroups" >>$conf
  # IGMP Querier Compatibility Version
  echo "igmpVersion $Services_IgmpProxy_QuerierCompatibilityVersion" >>$conf
  # Default allow option for WAN Forwarding
  if [ "$Services_IgmpProxy_DefaultAllowFwd" = 1 ]; then
    echo 'DefaultAllow 1' >>$conf
  else
    echo 'DefaultAllow 0' >>$conf
  fi
  for i in `strip $Services_IgmpProxy_WanForwardingTable_List`; do
    local ifname;
    local group; eval group=\${'Services_IgmpProxy_WanForwardingTable_'$i'_FwdGroupAddress':-}
    local mask; eval mask=\${'Services_IgmpProxy_WanForwardingTable_'$i'_FwdGroupMask':-}
    local allow; eval allow=\${'Services_IgmpProxy_WanForwardingTable_'$i'_FwdAllow':-}
    local interface; eval interface=\${'Services_IgmpProxy_WanForwardingTable_'$i'_FwdInterface':-}
    if [ "$interface" = "" ]; then
      ifname=`cat $WAND/$Services_IgmpProxy_UpstreamInterface/ip/ifname 2>/dev/null`
    else
      ifname=`cat $WAND/$interface/ifname 2>/dev/null`
    fi
    if [ "$group" != "" ] && [ "$mask" != "" ] && [ "$allow" != "" ] && [ "$ifname" != "" ]; then
      echo "WanFwdRule $group $mask $allow $ifname" >>$conf
    fi
  done
  # Build list of interfaces managed by igmpproxy
  local intfs=''; local ifn; local ip; local i
  # Exclude lo interface
  echo 'phyint lo disabled' >>$conf
  # Upstream interface
  echo $Services_IgmpProxy_UpstreamInterface >$dir/upstream
  ip=`cat $WAND/$Services_IgmpProxy_UpstreamInterface/ip/ipaddr 2>/dev/null`
  if [ "$ip" != '' ]; then
    ifn=`cat $WAND/$Services_IgmpProxy_UpstreamInterface/ip/ifname 2>/dev/null`
    intfs="$intfs $ifn"
    echo "phyint $ifn upstream ratelimit 0 threshold 1" >>$conf
    if [ -f /proc/mc_acceleration/upstream_ifname ]; then
      echo $ifn > /proc/mc_acceleration/upstream_ifname
    fi
  else
    # Upstream interface does not have IP
    # so there is no point in starting igmpproxy.
    rm -f $conf
    return
  fi
  # Downstream interfaces
  local nodown=1
  echo $Services_IgmpProxy_DownstreamInterfaces >$dir/dnstreams
  for i in `strip $Services_IgmpProxy_DownstreamInterfaces`; do
    ip=`cat $LAND/$i/ip/ipaddr 2>/dev/null`
    if [ "$ip" != '' ]; then
      ifn=`cat $LAND/$i/ifname 2>/dev/null`
      intfs="$intfs $ifn"
      nodown=0
      echo "phyint $ifn downstream ratelimit 0 threshold 1" >>$conf
    fi
  done
  # All other interfaces are disabled by default in igmpproxy,
  # so no need to add disabled entry in conf.
  echo '# empty line' >>$conf
  # No need to launch igmpproxy if no downstream interface available
  if [ $nodown = 1 ]; then
    rm -f $conf
  fi
}

check_igmp() {
  if [ ! -e /usr/bin/igmpproxyd ]; then
    ARG=nothing
    return
  fi
  local enable="test x$Services_IgmpProxy_Enable = x1"
  local active="base_exist_daemon $daemon"
  base_check_arg "$enable" "$active"
}

start_igmp() {
  build_igmp_configfile
  if [ -f "$conf" ]; then
    local log=$Services_IgmpProxy_LogLevel
    [ "$log" = '' ] && log=3
    local cmd="/usr/bin/igmpproxyd -D -l$log -c $conf"
    base_add_daemon $daemon "$cmd"
  fi
}

stop_igmp() {
  local pid="`pidof $daemon 2>/dev/null`"
  base_kill_daemon "$daemon" "$pid"
  rm -rf $dir
}

main_igmp() {
  eval $PUSH_ARG

  local dir='/var/bewan/igmpproxy.d'
  local conf="$dir/igmpproxy.conf"

  local daemon="igmpproxyd"
  local pidfile="/var/run/$daemon.pid"

  check_igmp
  base_log "$INITD/igmp $ARG" debug

  case $ARG in
  stop)
    stop_igmp
    ;;
  start)
    start_igmp
    ;;
  restart)
    stop_igmp
    start_igmp
    ;;
  esac
}

main_igmp
