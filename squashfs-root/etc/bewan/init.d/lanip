#!/bin/sh
# /etc/bewan/init.d/lanip $1 $2
# $1 or $ARG = start stop restart
# $2 or $LANID = action for lanid

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

LANID=${LANID:-}
if [ "$LANID" = '' ]; then
  LANID=${2:-}
fi

check_lanip() {
  local landev intfs en i
  landev='LANDevice_'$LANID
  eval intfs=\${$landev'_IPInterface_List':-}

  en=0
  for i in `strip $intfs`; do
    eval en=\${$landev'_IPInterface_'$i'_Enable':-0}
    [ "$en" = 1 ] && break
  done

  # Sanity check
  local enable="test x$en = x1"
  local active="test -d $LAND/$LANID/ip"
  base_check_arg "$enable" "$active"
}

stop_lanip() {
  # keep value of old IP@
  OLDLANIP=`cat $LAND/$LANID/ip/ipaddr 2>/dev/null`
  OLDFIRSTIPDHCP=`cat $LAND/$LANID/dhcp/firstip 2>/dev/null`
  OLDLASTIPDHCP=`cat $LAND/$LANID/dhcp/lastip 2>/dev/null`

  # Shutdown DHCP server for $LANID, $IFNAME
  ARG=stop
  base_call_initd 'landhcp'
  base_call_scripts 'ip-down-dhcp'

  # Shutdown DHCP client for $IFNAME
  base_call_initd 'dhcpclient'

  # Remove IP interfaces for IFNAME
  ip addr flush dev $IFNAME
  # Remove IP information
  rm -rf $LAND/$LANID/ip
}

start_lanip() {
  local landev intfs wlanIntfsCount en i
  local iptype ipaddr smask mask
  local gateway dnsservers
  local dhcp=0 static=0 restartwifi=0
  local restartphy=0

  # Create ip directory and add IP addresses
  landev='LANDevice_'$LANID
  eval intfs=\${$landev'_IPInterface_List'}

  eval firstipdhcp=\${$landev'_HostConfig_MinAddress':-}
  eval lastipdhcp=\${$landev'_HostConfig_MaxAddress':-}

  for i in `strip $intfs`; do
    eval en=\${$landev'_IPInterface_'$i'_Enable':-0}
    [ "$en" != 1 ] && continue

    eval iptype=\${$landev'_IPInterface_'$i'_AddressingType':-}
    eval ipaddr=\${$landev'_IPInterface_'$i'_IPAddress':-}
    eval smask=\${$landev'_IPInterface_'$i'_SubnetMask':-}
    eval gateway=\${$landev'_IPInterface_'$i'_Gateway':-}
    eval dnsservers=\${$landev'_DNSServers':-}

    [ "$ipaddr" = "" ] && iptype='DHCP'
    [ "$smask" = "" ] && iptype='DHCP'

    if [ "$iptype" = 'Static' ] && [ "$dhcp" = 0 ]; then
      local bcast
      mkdir -p $LAND/$LANID/ip
      bcast=`ipbcast $ipaddr $smask`
      if [ "$static" = 0 ]; then

        # Call ip-up-dhcp script with relevant arguments
        IPADDR=$ipaddr SMASK=$smask BCAST=$bcast ROUTERS=$gateway SERVERS=$dnsservers DHCPSRV=''
        base_call_scripts 'ip-up-dhcp'

        if [ "$OLDLANIP" != '' ] && [ "$OLDLANIP" != "$ipaddr" ]; then
          restartphy=1
        fi
      else
        mask=`ipmask $smask`
        ip addr add dev $IFNAME $ipaddr/$mask broadcast $bcast
      fi
      static=1
    fi
    if [ "$iptype" = DHCP ] && [ "$static" = 0 ] && [ "$dhcp" = 0 ]; then
      mkdir -p $LAND/$LANID/ip
      dhcp=1
      # Used to construct command line or configuration file
      . /etc/bewan/lib/dhcpclient
      dhcpclient_config_lan
    fi
  done

  if [ "$OLDFIRSTIPDHCP" != '' ] && [ "$OLDFIRSTIPDHCP" != "$firstipdhcp" ]; then
    restartwifi=1
  fi
  if [ "$OLDLASTIPDHCP" != '' ] && [ "$OLDLASTIPDHCP" != "$lastipdhcp" ]; then
    restartwifi=1
  fi

  if [ $restartwifi = 1 ]; then
    eval wlanIntfsCount=\${$landev'_WLANInterface_Count':-0}
    i=0; while [ $i -lt $wlanIntfsCount ]; do
      i=$(($i + 1))
     eval en=\${$landev'_WLANInterface_'$i'_Enable':-0}
      [ "$en" != 1 ] && continue
      local ARG=restart
      local ETHID=$i
      base_call_initd 'wifi'
    done
  fi

  # Put ethernet phy in powerdown to force a DHCP renew of clients on the LAN
  if [ $restartphy = 1 ]; then
    sh $INITD/lanphy restart $LANID
  fi

  # Allow to record in arp cache gratuitous arp requests not for us
  #echo 1 >/proc/sys/net/ipv4/conf/$IFNAME/arp_noisy 2>/dev/null

  # Set up DHCP for LANID
  # Start dhcpclient daemon
  # Set-up passthrough
  local ARG=start
  base_call_initd 'landhcp dhcpclient'
}

main_lanip() {
  eval $PUSH_ARG

  local IFNAME=`cat $LAND/$LANID/ifname 2>/dev/null`
  local OLDLANIP=

  local OLDFIRSTIPDHCP=
  local OLDLASTIPDHCP=

  if [ "$IFNAME" = "" ]; then
    return
  fi

  check_lanip
  base_log "$INITD/lanip $ARG $LANID" debug


  case $ARG in
  stop)
    stop_lanip
    ;;
  start)
    start_lanip
    ;;
  restart)
    stop_lanip
    start_lanip
    ;;
  esac
}

main_lanip
