#!/bin/sh
# /etc/bewan/init.d/dyndns $1 $2
# $1 or $ARG = start stop restart
# $2 or DYNDNS_ID = action for specific account in table

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

DYNDNS_ID=${DYNDNS_ID:-}
if [ "$DYNDNS_ID" = '' ]; then
  DYNDNS_ID=${2:-}
fi

# Include library
if [ "${DYNDNS_LIB:-0}" = 0 ]; then
  . /etc/bewan/lib/dyndns
fi

# Include crontab library
if [ "${CRON_LIB:-0}" = 0 ] && [ -f /etc/bewan/lib/crontab ]; then
  . /etc/bewan/lib/crontab
fi

# Sanity check
check_dyndns() {
  local active="test -f $dyndnscmd"
  base_check_arg "test x$enable = x1" "$active"
}

# Remove service
stop_dyndns() {
  rm -f $conffile
  rm -f $dyndnscmd
  #rm -f $cachefile
  if [ ${CRON_LIB:-0} = 1 ]; then
    crontab_remove $cron_name
  fi
}

# Start service for account
start_dyndns() {
  local lockfile="/var/bewan/lock/dyndns-$DYNDNS_ID"
  local cacert_path="$dyndnsdir/cacert.pem"

  # evaluate account parameters
  local server;     eval server=\${$cliroot'_Server'}
  local servername; eval servername=\${$cliroot'_ServerName'}
  local username;   eval username=\${$cliroot'_Username'}
  local password;   eval password=\${$cliroot'_Password'}
  password=$( base_get_password $password )
  
  local host;       eval host=\${$cliroot'_Host'}
  local domainappending;       eval domainappending=\${$cliroot'_DomainAppending'}
  local domain;       eval domain=\${$cliroot'_DomainName'}
  local periodicupdate;       eval periodicupdate=\${$cliroot'_PeriodicUpdate'}
  local https;		eval https=\${$cliroot'_EnableHTTPS'}
  local retry_interval;       eval retry_interval=\${$cliroot'_RetryInterval'}
  if [ ${domainappending} = 1 ]; then
    host=${host}.${domain}
  fi
  local mx;         eval mx=\${$cliroot'_Mx'}
  local cache;      eval cache=\${$cliroot'_Cache'}

  # Copy cacert in /tmp/cacert.pem
  echo "cd $cliroot;get CACertPem" | cli -q>$cacert_path

  # Create dyndns refresh script at location $dyndnscmd
  create_dyndns
}

# Refresh dyndns account
refresh_dyndns() {
  [ ! -f "$dyndnscmd" ] && return
  local ix; local inet=`cat $WAND/internet 2>/dev/null`
  for ix in `strip $inet`; do
    local ipaddr=`cat $WAND/$ix/ip/ipaddr 2>/dev/null`
    if [ "$ipaddr" != '' ]; then
      start-stop-daemon -S -b -x $dyndnscmd -- $ix
    fi
  done
}

# Refresh dyndns account if ip has changed
refresh_dyndns_if_ip_changed() {
  [ ! -f "$dyndnscmd" ] && return
  local ix; local inet=`cat $WAND/internet 2>/dev/null`
  local host;       eval host=\${$cliroot'_Host'}

  for ix in `strip $inet`; do
    local ipaddr=`cat $WAND/$ix/ip/ipaddr 2>/dev/null`
    local ifname=`cat $WAND/$ix/ip/ifname 2>/dev/null`
    local resolv="`cat $WAND/$ix/ip/dnssrvlst 2>/dev/null`"
    local lastip=`nslookup -q -i $ifname $host $resolv 2>/dev/null`
    if [ "$ipaddr" != '' ] && [ "$ipaddr" != "$lastip" ]; then
      start-stop-daemon -S -b -x $dyndnscmd -- $ix
    fi
  done
}

# Dyndns script main function
main_dyndns() {
  eval $PUSH_ARG

  # Initialize variables used by local functions
  local cliroot="Services_DynDNS_$DYNDNS_ID"
  local enable; eval enable=\${$cliroot'_Enable':-0}

  local dyndnsdir='/var/bewan/dyndns.d'
  local dyndnscmd="$dyndnsdir/dyndns-$DYNDNS_ID.sh"
  local conffile="$dyndnsdir/ez-ipupdate-$DYNDNS_ID.conf"
  local cachefile="$dyndnsdir/dyndns-$DYNDNS_ID.cache"
  local statusfile="$dyndnsdir/dyndns-$DYNDNS_ID.status"
  local logfile="$dyndnsdir/dyndns-$DYNDNS_ID.log"
  local cron_name="dyndns-$DYNDNS_ID"
  mkdir -p $dyndnsdir

  check_dyndns
  base_log "$INITD/dyndns $ARG $DYNDNS_ID" debug

  case $ARG in
  stop)
    stop_dyndns
    ;;
  start)
    start_dyndns
    ;;
  restart)
    stop_dyndns
    start_dyndns
    ;;
  esac

  # launch script if top arg = restart or refresh
  # otherwise the script is called at ip-up time
  if [ "$TOP_ARG" = refresh ]; then
    refresh_dyndns
  elif [ "$TOP_ARG" = restart ]; then
    refresh_dyndns_if_ip_changed
  fi
}

# Start all dyndns accounts
if [ "$DYNDNS_ID" = 'all' ] && ( [ $ARG = start ] || [ $ARG = stop ] ); then

  for DYNDNS_ID in `strip $Services_DynDNS_List`; do
    base_call_initd 'dyndns'
  done

  DYNDNS_ID='all'
  return
fi

main_dyndns
