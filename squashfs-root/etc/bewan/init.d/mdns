#!/bin/sh
# /etc/bewan/init.d/mdns $1
# $1 or $ARG = start stop restart

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

# check
check_mdns() {
  if [ ! -f /usr/bin/mDNSResponder ]; then
    ARG=nothing
    return
  fi
  local enable="test x$Services_MDNSResponder_Enable = x1 -a x$Device_Hostname != x"
  local active='base_exist_daemon mdns'
  base_check_arg "$enable" "$active"
}

# stop
stop_mdns() {
  local pid=`pidof mDNSResponder`
  base_kill_daemon mdns "$pid"
  rm -rf $dir
}

# proxy server port
proxy_server_port() {
  # HTTP server index ?
  local ix=$1
  # Proxy Server Enable ?
  en=${ProxyHttpServer_Enable:-0}
  [ "$en" != 1 ] && return 0
  # ProxyHttpServer redirection ?
  [ "$ProxyHttpServer_Redirection_Default" != "$ix" ] && return 0
  # Get Port from ProxyHttpServer
  local port
  if [ "$ProxyHttpServer_BindLocal" = 1 ]; then
    port=$ProxyHttpServer_SSLPort
  else
    port=$ProxyHttpServer_ListenPort
  fi
  if [ "$port" != '' ]; then
    echo -n $port
    return 0
  fi
  return 0
}

# http server port
http_server_port() {
  # HTTP server index ?
  local ix=$1
  [ "$ix" = '' ] && return 0
  # HTTP Server Enable ?
  local en; eval en=\${'HttpServer_'$ix'_Enable':-0}
  [ "$en" != 1 ] && return 0
  # Get SSL port first
  local port; eval port=\${'HttpServer_'$ix'_SSLPort'}
  if [ "$port" != '' ]; then
    echo -n $port
    return 0
  fi
  # Check that HTTP server is not bound to localhost
  local lhost; eval lhost=\${'HttpServer_'$ix'_BindLocal'}
  if [ "$lhost" = 1 ]; then
    proxy_server_port $1
    return $?
  fi
  # Get local port
  eval port=\${'HttpServer_'$ix'_ListenPort'}
  if [ "$port" != '' ]; then
    echo -n $port
    return 0
  fi
  return 0
}

# start
start_mdns() {
  local port
  # Create Services file
  mkdir -p $dir
  rm -f $conf
  # Register Web Configurator
  if [ "${Services_IADConfigurator_Enable:-0}" = 1 ]; then
    echo "" >> $conf
    echo "$Device_Hostname Setup" >> $conf
    echo "_http._tcp." >> $conf
    echo "$(http_server_port "$Services_IADConfigurator_HttpServer")" >> $conf
  fi
  # Register NAS Server
  if [ "${Services_NAS_Enable:-0}" = 1 ]; then
    echo "" >> $conf
    echo "$Device_Hostname NAS Server" >> $conf
    echo "_http._tcp." >> $conf
    echo "$(http_server_port "$Services_NAS_HttpServer")" >> $conf
  fi

if [ 0 = 1 ]; then # TODO TODO TODO

  # Register icam grabbler
  if [ "${iCam_Grabber_Enable}:-0" = 1 ]; then
    echo "" >> $conf
    echo "$Device_Hostname" >> $conf
    echo "_icamstream._tcp." >> $conf
    if [ "$ProxyHttpServer_Enable" = 1 ]; then
      port=$ProxyHttpServer_ListenPort
    else
      port=$WebConfigurator_LocalPort
    fi
    [ "$port" = "" ] && port=8080
    echo "$port" >> $conf
  fi
  # Register home automation Server
  if [ "${ZigbeeConfig_Enable:-0}" = 1 ]; then
    echo "" >> $conf
    echo "$Device_Hostname Home Automation Server" >> $conf
    echo "_homeautomation._tcp." >> $conf
    if [ "$ProxyHttpServer_Enable" = 1 ] && [ "$ProxyHttpServer_Redirection_Default" = "HttpServer" ]; then
      port=$ProxyHttpServer_ListenPort
    else
      port=$HttpServer_Port
    fi
    [ "$port" = "" ] && PORT=80
    echo "$port" >> $conf
  fi

fi

  # TODO: listen to other interface than lan1
  local ifname=${LANDevice_1_Ifname}
  # install daemon
  if [ -f $conf ]; then
    local cmd="/usr/bin/mDNSResponder -f $conf -i $ifname"
    base_add_daemon mdns "$cmd"
  fi
}

# main
main_mdns() {
  eval $PUSH_ARG

  local dir=/var/bewan/mdns.d
  local conf=$dir/services.conf

  check_mdns
  base_log "$INITD/mdns $ARG" debug


  case $ARG in
  stop)
    stop_mdns
    ;;
  start)
    start_mdns
    ;;
  restart)
    stop_mdns
    start_mdns
    ;;
  esac
}

# work
main_mdns
