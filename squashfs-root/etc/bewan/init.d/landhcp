#!/bin/sh
# /etc/init.d/landhcp $1 $2
# $1 or $ARG = start stop restart
# $2 or $LANID = action for lanid
# DO_PASSTHROUGH = 1, need to call passthrough script
# DONT_REMOVE_LEASES = 1, keep lease file

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

local LANID=${LANID:-}
if [ "$LANID" = '' ]; then
  LANID=${2:-}
fi

local DO_PASSTHROUGH=${DO_PASSTHROUGH:-0}
local DONT_REMOVE_LEASES=${DONT_REMOVE_LEASES:-0}

check_landhcp() {
  if [ "$IFNAME" = "" ]; then
    ARG=nothing
    return
  fi
  local enable="test -d $LAND/$LANID/ip"
  local active="test -d $LAND/$LANID/dhcp"
  base_check_arg "$enable" "$active"
}

stop_relay_landhcp() {
  base_log "stop_relay_landhcp: TODO !!!"
}

start_relay_landhcp() {
  # remove old files
  rm -f $DHCRELAYD/$IFNAME $DHCRELAYD/$IFNAME.bind $IFNAME.external
  
  local landev='LANDevice_'$LANID

  # DHCP relay
  local servers; eval servers=\${$landev'_HostConfig_DHCPRelay_Servers_List':-}

  local list=''
  local i; for i in `strip $servers`; do
    local address; eval address=\${$landev'_HostConfig_DHCPRelay_Servers_'$i'_Address':-}
    list="$list $address"
  done

  local interface; eval interface=\${$landev'_HostConfig_DHCPRelay_Interface':-}
  local external; eval external=\${$landev'_HostConfig_DHCPRelay_External':-}

  if [ "$interface" = "" ]; then
    base_log "landhcp: missing interface for dhcprelay"
    return
  fi

  #DHCPINTERFACE=`cat $WAND/$DHCPINTERFACE/ip/ifname 2>/dev/null`
  if [ "$external" = "1" ]; then
    local ppp; eval ppp=\${'WANConnectionDevice_'$interface'_WANPPPConnection_Enable':-}
    if [ "$ppp" = "1" ]; then
      interface="ppp$interface"
    else
      interface="wan$interface"
    fi  
  else
    interface="lan$interface"
  fi
  
  if [ "$list" != "" ] && [ "$interface" != "" ]; then
    echo "$list" >$DHCRELAYD/$IFNAME
    echo "$interface" >$DHCRELAYD/$IFNAME.bind
    if [ "$external" = "1" ]; then 
      echo "1" > $DHCRELAYD/$IFNAME.external
    fi  
  fi  

  # Program the ACL in the physical network interfaces
  # Start dhcp daemon
  local ARG=start
  base_call_initd 'lanacl dhcp'
}

stop_landhcp() {

  # Remove leases belonging to this lan
  [ "$DONT_REMOVE_LEASES" != 1 ] && [ -f /var/bewan/dnsmasq.leases ] && {
    local ipaddr=`cat $LAND/$LANID/ip/ipaddr 2>/dev/null`
    local ipmask=`cat $LAND/$LANID/ip/ipmask 2>/dev/null`
    removeleases /var/bewan/dnsmasq.leases $ipaddr $ipmask
  }

  # Remove dnsmasq configuration
  rm -f $conf_file

  # Stop DHCP daemons for $IFNAME
  local ARG=stop
  base_call_initd 'dhcp'

  # Remove DHCP configuration
  rm -rf $LAND/$LANID/dhcp
}

start_landhcp() {

  mkdir $LAND/$LANID/dhcp
  local landev='LANDevice_'$LANID

  local restartwifi=0 restartphy=0

  local en; eval en=\${$landev'_HostConfig_DHCPServerEnable':-0}
  [ "$en" != 1 ] && return
  # Do not start DHCP server if lan is bridged to a wan
  # FIXME: this is wrong when in PPPoE passthrough mode, so comment it
  #local br; eval br=\${$landev'_HostConfig_AssociatedConnection'}
  #[ "$br" != '' ] && return

  local relay; eval relay=\${$landev'_HostConfig_DHCPRelay_Enable':-0}
  if [ "$relay" = "1" ]; then
    start_relay_landhcp
    return
  fi

  local type; eval type=\${$landev'_IPInterface_1_AddressingType'}
  [ "$type" != 'Static' ] && return

  # Set up DHCP server configuration file
  local ipaddr; eval ipaddr=\${$landev'_IPInterface_1_IPAddress'}
  local ipmask; eval ipmask=\${$landev'_IPInterface_1_SubnetMask'}

  local smask; eval smask=\${$landev'_HostConfig_SubnetMask'}
  local routers; eval routers=\${$landev'_HostConfig_IPRouters'}
  local servers; eval servers=\${$landev'_HostConfig_DNSServers'}
  local domain; eval domain=\${$landev'_HostConfig_DomainName'}

  [ "$smask" = '' ] && smask=$ipmask
  [ "$routers" = '' ] && routers=$ipaddr
  [ "$servers" = '' ] && servers=$ipaddr
  [ "$domain" = '' ] && domain=$Device_Domain

  # build dnsmasq.conf
  rm -f $conf_file
  local debug; eval debug=\${$landev'_HostConfig_Debug'}
  [ "$debug" = 1 ] && echo log-dhcp >>$conf_file

  # Enter specific DHCP option and range matches
  # Match DHCP Vendor Class, DHCP User Class, MAC Address
  local list; eval list=\${$landev'_HostConfig_DHCPMatch_List'}
  # VendorClassTable contains class name and the associated list of 
  # WANConnectionDevice indexes only through which DNS queries can be resolved
  # by LAN clients using this vendor class name.
  local vclist; eval vclist=\${$landev'_HostConfig_VendorClassTable_List'}
  # build also the list of matches
  local netids=$IFNAME
  local i; for i in `strip $list`; do
    # Build netids list of unique netid
    local match; eval match=\${$landev'_HostConfig_DHCPMatch_'$i'_SetMatchName'}
    [ "$match" = '' ] && continue
    local netid="$IFNAME-$match"
    local netid_found=0
    local k; for k in `strip $netids`; do
        [ "$netid" = "$k" ] && netid_found=1
    done
    [ ! "$netid_found" -eq 1 ] && netids="$netids,$netid"
    local vendor; eval vendor=\${$landev'_HostConfig_DHCPMatch_'$i'_VendorClass'}
    local user; eval user=\${$landev'_HostConfig_DHCPMatch_'$i'_UserClass'}
    local mac; eval mac=\${$landev'_HostConfig_DHCPMatch_'$i'_MacAddress'}
    if [ "$vendor" != '' ]; then
      local allowedif='';
      # checks if this vendor is present in VendorClassTable
      # if present, extract the allowed WANConnectionDevice indexes through which
      # DNS queries can be sent.
      local j; for j in `strip $vclist`; do
        local vcname; eval vcname=\${$landev'_HostConfig_VendorClassTable_'$i'_Name'}
        if [ "$vendor" = "$vcname" ]; then
          eval allowedif=\${$landev'_HostConfig_VendorClassTable_'$i'_DnsAllowedIfList'}
          break
        fi
      done
      # if allowed WANConnectionDevice indexes are specified, write those to 
      # dnsmasq.conf in the following format
      # dhcp-vendorclass=lan1-IPTV,IPTV@1,2
      # where 1, 2 corresponds to WANConnectionDevice 1 and 2 respectively.
      if [ "$allowedif" != '' ]; then
      cat >>$conf_file <<EOF
dhcp-vendorclass=$netid,$vendor@$allowedif
EOF
      else 
      cat >>$conf_file <<EOF
dhcp-vendorclass=$netid,$vendor
EOF
      fi
    elif [ "$user" != '' ]; then
      cat >>$conf_file <<EOF
dhcp-userclass=$netid,$user
EOF
    elif [ "$mac" != '' ]; then
      cat >>$conf_file <<EOF
dhcp-mac=$netid,$mac
EOF
    fi
  done

  # Enter specific DHCP ranges first
  local list; eval list=\${$landev'_HostConfig_DHCPRange_List'}
  local i; for i in `strip $list`; do
    local min; eval min=\${$landev'_HostConfig_DHCPRange_'$i'_MinAddress'}
    [ "$min" = '' ] && continue
    local max; eval max=\${$landev'_HostConfig_DHCPRange_'$i'_MaxAddress'}
    [ "$max" = '' ] && continue
    local lease; eval lease=\${$landev'_HostConfig_DHCPRange_'$i'_DHCPLeaseTime'}
    [ "$lease" = '' ] && lease=86400
    [ "$lease" = '0' ] && lease='infinite'
    # Matching class
    local match; eval match=\${$landev'_HostConfig_DHCPRange_'$i'_MatchName'}
    local netid="$IFNAME"
    [ "$match" != '' ] && netid="net:$IFNAME-$match"
    local enable_range; eval enable_range=\${$landev'_HostConfig_DHCPRange_'$i'_Enable'}
    if [ "$enable_range" = '1' ]; then
    cat >>$conf_file <<EOF
dhcp-range=$netid,$min,$max,$lease
EOF
    fi
  done

  # Then enter main DHCP range
  local min; eval min=\${$landev'_HostConfig_MinAddress'}
  local max; eval max=\${$landev'_HostConfig_MaxAddress'}
  local lease; eval lease=\${$landev'_HostConfig_DHCPLeaseTime'}
  [ "$min" = '' ] && min=$(ipfirst $ipaddr $ipmask)
  [ "$max" = '' ] && max=$(iplast $ipaddr $ipmask)
  [ "$lease" = '' ] && lease=86400
  [ "$lease" = '0' ] && lease='infinite'
  local enable_main_range; eval enable_main_range=\${$landev'_HostConfig_MainRangeEnable'}
  if [ "$enable_main_range" = '1' ]; then
    echo $min >$LAND/$LANID/dhcp/firstip
    echo $max >$LAND/$LANID/dhcp/lastip
    cat >>$conf_file <<EOF
dhcp-range=$IFNAME,$min,$max,$lease
EOF
  fi

  # First, enter global DHCP options for all tags
  cat <<EOF >>$conf_file
# Global DHCP Options for all tags
EOF
  local netid
  for netid in `strip $netids`; do
    cat >>$conf_file <<EOF
dhcp-option=$netid,option:netmask,$smask
dhcp-option=$netid,option:router,$routers
dhcp-option=$netid,option:dns-server,$servers
EOF
    if [ "$domain" != '' ]; then
      cat >>$conf_file <<EOF
dhcp-option=$netid,option:domain-name,$domain
EOF
    fi
  done

  # TR111/WT111 management
  local tr111en=${Services_TR111_TR111Enable:-0}
  local wt111en=${Services_TR111_WT111Enable:-0}
  local lans=${Services_TR111_LANInterfaces:-}
  # No lan interface specified
  if [ $tr111en != 1 ] && [ $wt111en != 1 ]; then
    lans=''
  fi
  # Is TR111/WT111 enabled for LANID ?
  local lan
  local found=0
  for lan in `strip $lans`; do
    if [ "$LANID" = "$lan" ]; then
      found=1
    fi
  done

  if [ $found = 1 ]; then
    local prod
    if [ "$Device_Product_ProductClass" != '' ]; then
      prod=$Device_Product_ProductClass
    else
      prod=$Device_Product_Code
    fi
    local serial=`pzinfo serial`
    local vendor='dslforum.org'
    local oui=${Device_Product_ManufacturerOUI:-}
    
    # Fill option 125 for TR111
    if [ $tr111en = 1 ]; then
      local iana=3561
      cat <<EOF >>$conf_file
# Option 125 for TR111
dhcp-option=$IFNAME,option:vendor-id-spec,$iana,$oui,$serial,$prod
EOF
    fi
  fi

  # Enter then, specific DHCP options
  cat <<EOF >>$conf_file
# Specific DHCP Options
EOF
  local list; eval list=\${$landev'_HostConfig_DHCPOptions_List'}
  local i; for i in `strip $list`; do
    local enable; eval enable=\${$landev'_HostConfig_DHCPOptions_'$i'_Enable'}
    [ "$enable" != 1 ] && continue
    # Option: allow all typed strings recognized by dnsmasq
    local name; eval name=\${$landev'_HostConfig_DHCPOptions_'$i'_Name'}
    [ "$name" = '' ] && continue
    local option=$name
    local alpha="`echo $name | tr -d 0-9`"
    local full="`echo $name | grep -e ':'`"
    if [ "$alpha" != '' ] && [ "$full" = '' ]; then
      option="option:$name"
    fi
    # Matching class
    local match; eval match=\${$landev'_HostConfig_DHCPOptions_'$i'_MatchName'}
    local netid="$IFNAME"
    [ "$match" != '' ] && netid="$IFNAME-$match"
    # Forced option
    local forced; eval forced=\${$landev'_HostConfig_DHCPOptions_'$i'_Forced'}
    local force=''; [ "$forced" = 1 ] && force='-force'
    # Value
    local value; eval value=\${$landev'_HostConfig_DHCPOptions_'$i'_Value'}
    cat >>$conf_file <<EOF
dhcp-option$force=$netid,$option,$value
EOF
  done

  # Enter specific hosts
  local list; eval list=\${$landev'_HostConfig_ClientTable_List'}
  local i; for i in `strip $list`; do
    local hostname; eval hostname=\${$landev'_HostConfig_ClientTable_'$i'_Hostname'}
    local macaddr; eval macaddr=\${$landev'_HostConfig_ClientTable_'$i'_MACAddress'}
    local clipaddr; eval clipaddr=\${$landev'_HostConfig_ClientTable_'$i'_IPAddress'}
    local lease; eval lease=\${$landev'_HostConfig_DHCPLeaseTime'}
    [ "$lease" = '' ] && lease=86400
    [ "$lease" = '0' ] && lease='infinite'
    if [ "$hostname" != '' ] || [ "$macaddr" != '' ] || [ "$clipaddr" != '' ]; then
      cat >>$conf_file <<EOF
dhcp-host=$macaddr,$clipaddr,$hostname,$lease
EOF
    fi
  done

  if [ $found = 1 ]; then
    local prod
    if [ "$Device_Product_ProductClass" != '' ]; then
      prod=$Device_Product_ProductClass
    else
      prod=$Device_Product_Code
    fi
    local serial=`pzinfo serial`
    local vendor='dslforum.org'
    local oui=${Device_Product_ManufacturerOUI:-}

    # Fill option 43 dslforum.org with sub-options 5,4,3,2,1 for WT111
    if [ $wt111en = 1 ]; then
      local tag="$IFNAME-wt111"
      if [ $wt111en = 1 ]; then
        cat <<EOF >>$conf_file
# Option 43 for WT111
dhcp-vendorclass=$tag,$vendor
dhcp-option-force=$tag,vendor:"$vendor",5,"$prod"
dhcp-option-force=$tag,vendor:"$vendor",4,"$serial"
dhcp-option-force=$tag,vendor:"$vendor",3,"$oui"
EOF
      fi
      local prov=${Device_Product_ProvisioningCode:-}
      if [ "$prov" != '' ]; then
        cat <<EOF >>$conf_file
dhcp-option-force=$tag,vendor:"$vendor",2,"$prov"
EOF
      fi
      local url=${Services_TR069_ACSUrl:-}
      if [ "$url" != '' ]; then
        cat <<EOF >>$conf_file
dhcp-option-force=$tag,vendor:"$vendor",1,"$url"
EOF
      fi
    fi
  fi

  if [ "$OLDMINDHCP" != '' ] && [ "$OLDMINDHCP" != "$min" ]; then  
    restartwifi=1
    restartphy=1
  fi
  if [ "$OLDMAXDHCP" != '' ] && [ "$OLDMAXDHCP" != "$max" ]; then
    restartwifi=1
    restartphy=1
  fi

  if [ $restartwifi = 1 ]; then
    local wlanIntfsCount; eval wlanIntfsCount=\${$landev'_WLANInterface_Count':-0}
    local i=0; while [ $i -lt $wlanIntfsCount ]; do
      i=$(($i + 1))
      local en; eval en=\${$landev'_WLANInterface_'$i'_Enable':-0}
      [ "$en" != 1 ] && continue
      local ARG=restart
      local ETHID=$i
      base_call_initd 'wifi'
    done
  fi

  # Put ethernet phy in powerdown to force a DHCP renew of clients on the LAN
  if [ $restartphy = 1 ]; then
    sh $INITD/lanphy restart $LANID
  fi

  # Start dhcp daemon
  local ARG=start
  base_call_initd 'dhcp'
}

restart_passthrough() {
  local ARG=restart
  base_call_initd 'passthrough'
}

main_landhcp() {
  eval $PUSH_ARG

  local IFNAME=`cat $LAND/$LANID/ifname 2>/dev/null`
  local conf_file=$DNSMASQD/$IFNAME

  local OLDMINDHCP="$(cat $LAND/$LANID/dhcp/firstip 2>/dev/null)"
  local OLDMAXDHCP="$(cat $LAND/$LANID/dhcp/lastip 2>/dev/null)"

  check_landhcp
  base_log "$INITD/landhcp $ARG $LANID" debug

  case $ARG in
  stop)
    stop_landhcp
    ;;
  start)
    start_landhcp
    ;;
  restart)
    stop_landhcp
    start_landhcp
    ;;
  esac
  [ "$DO_PASSTHROUGH" = 1 ] && restart_passthrough
}

main_landhcp
