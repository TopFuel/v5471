#!/bin/sh
# /etc/bewan/init.d/iptables $1
# $1 or $ARG = start stop restart

if [ "${ARG:-}" = '' ]; then
  . /etc/bewan/init.d/setparam
fi

create_subchains() {
  local table=$1; local old new
  for new in `cat $NFD/$table.subchains 2>/dev/null`; do
    old=''
    for old in `cat $NFD/created/$table.subchains 2>/dev/null`; do
      [ "$old" = "$new" ] && break;
    done
    [ "$old" = "$new" ] && continue;
    echo ":$new - [0:0]" >>$iptables
  done
}

destroy_subchains() {
  local table=$1; local old new
  for old in `cat $NFD/created/$table.subchains 2>/dev/null`; do
    new=''
    for new in `cat $NFD/$table.subchains 2>/dev/null`; do
      [ "$old" = "$new" ] && break;
    done
    [ "$old" = "$new" ] && continue;
    iptables -t $table -F $old 2>&1 | logger
    iptables -t $table -X $old 2>&1 | logger
  done
  rm -f $NFD/created/$table.subchains
  cp -f $NFD/$table.subchains $NFD/created/$table.subchains 2>/dev/null
}

# Sanity check
check_iptables() {
  if ! which iptables-restore >/dev/null; then
    ARG=nothing
    return
  fi
  local enable='/bin/true'
  local active="test -f $iptables"
  base_check_arg "$enable" "$active"
}

stop_iptables() {

  # Return nat and filter tables to default
  iptables-restore <<-EOF
		*nat
		:PREROUTING ACCEPT [0:0]
		:POSTROUTING ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		COMMIT
		*filter
		:INPUT ACCEPT [0:0]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		COMMIT
	EOF

  # Return mangle table to default
  iptables-restore 2>/dev/null <<-EOF
		*mangle
		:PREROUTING ACCEPT [0:0]
		:INPUT ACCEPT [0:0]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		:POSTROUTING ACCEPT [0:0]
		COMMIT
	EOF

  rm -f $NFD/created/* $iptables
}

start_iptables() {

  local i
  local create
  local logdrop

  # Create tables
  if [ -f $iptables ]; then
    create='#'
  else
    create=''
  fi

  # Syslog Dropped Packets
  logdrop=$Firewall_LogDropped
  if [ "$logdrop" = 1 ]; then
    logdrop=''
  else
    logdrop='#'
  fi

   # Remove in nat table jumps to PREROUTING0 and POSTROUTING0
  iptables -t nat -D PREROUTING -j PREROUTING0 2>/dev/null
  iptables -t nat -D POSTROUTING -j POSTROUTING0 2>/dev/null

  # subchains directories
  mkdir -p $NFD/created

  # Reset file
  rm -f $iptables

  # nat table
  cat >>$iptables <<-EOF
		*nat
		:PREROUTING ACCEPT [0:0]
		:POSTROUTING ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		-F OUTPUT
		# parental control rules
		$create:PARENTAL_CONTROL - [0:0]
		# Prerouting 0 for additional global DNAT rules
		$create:PREROUTING0 - [0:0]
		-F PREROUTING0
		# Postrouting 0 for additional global SNAT rules
		$create:POSTROUTING0 - [0:0]
		-F POSTROUTING0
		# Upnp Port Mapping Table (don't flush)
		$create:UPNP-DNAT - [0:0]
		# WT.111 Port Mapping table
		$create:WT111 - [0:0]
	EOF
  i=0
  while [ $i -lt $WANConnectionDevice_Count ]; do
    i=$(($i + 1))
    cat >>$iptables <<-EOF
			$create:PREROUTING$i - [0:0]
			-F PREROUTING$i
			$create:PORTFW$i - [0:0]
			-F PORTFW$i
			$create:PORTDROP$i - [0:0]
			-F PORTDROP$i
		EOF
  done
  for i in `ls $WAND`; do
    [ -f "$WAND/$i/fw/nat" ] && {
      [ -f "$WAND/$i/ports" ] && {
        cat <$WAND/$i/ports >>$iptables
      }
      cat <$WAND/$i/fw/nat >>$iptables
    }
  done
  # Create subchains in nat table
  create_subchains nat
  # Additional NAT rules from global Firewall table
  if [ -f $NATRULES ]; then
    cat <$NATRULES >>$iptables
    grep PREROUTING0 $NATRULES >/dev/null
    [ $? = 0 ] && echo "-I PREROUTING -j PREROUTING0" >>$iptables
    grep POSTROUTING0 $NATRULES >/dev/null
    [ $? = 0 ] && echo "-I POSTROUTING -j POSTROUTING0" >>$iptables
  fi
  # Create parental control rules
  echo "-A PREROUTING0 -p tcp -m multiport --destination-port 80,443 -m mark ! --mark 0x0/0xf00 -j PARENTAL_CONTROL" >>$iptables
  # Commit nat table
  echo COMMIT >>$iptables

  local conntrackfilter
  eval conntrackfilter=${Conntrack_Filter_Enable:-0}

  # mangle table
  if [ -f $MANGLE -o -f $PREROUTING -o -f $POSTROUTING ]; then
    cat >>$iptables <<-EOF
			*mangle
			:PREROUTING ACCEPT [0:0]
			:INPUT ACCEPT [0:0]
			:FORWARD ACCEPT [0:0]
			:OUTPUT ACCEPT [0:0]
			:POSTROUTING ACCEPT [0:0]
			:CONNTRACK_FILTER - [0:0]
			# parental control rules
			$create:PARENTAL_CONTROL - [0:0]
			# dynamic rules
			$create:DYNAMICPOSTROUTING - [0:0]
			-F INPUT
			-F OUTPUT
			-F FORWARD
			-F PREROUTING
			-F POSTROUTING
			-F CONNTRACK_FILTER
		EOF

    # Create subchains in mangle table
    create_subchains mangle

    local conntrack_reserved_proc
    conntrack_reserved_proc="unknown_proc" # init to prevent danger when new architecture will appear
    if [ -f /proc/sys/net/nf_conntrack_reserved ]; then
          #kernel 2.6.20.19 and others
          conntrack_reserved_proc="/proc/sys/net/nf_conntrack_reserved"
    fi
    if [ -f /proc/sys/net/netfilter/nf_conntrack_reserved ]; then
          #kernel 2.6.32.32 and others
          conntrack_reserved_proc="/proc/sys/net/netfilter/nf_conntrack_reserved"
    fi

    # Add contrack filter jumps if enable
    if [ $conntrackfilter -eq 1 ]; then
      local conntrack_reserved max_conn
      eval conntrack_reserved=${Conntrack_Filter_ReservedConnections:-0}
      eval max_conn=${Conntrack_MaxEntries:-0}
      if [ $conntrack_reserved -gt $max_conn ]; then
        conntrack_reserved=$max_conn
      fi
      if [ -f $conntrack_reserved_proc ]; then
        echo $conntrack_reserved > $conntrack_reserved_proc
        cat >> $iptables <<-EOF
		-A PREROUTING -m conntrack --ctstate NEW -m connreserved -j CONNTRACK_FILTER
		-A OUTPUT -m conntrack --ctstate NEW -m connreserved -j CONNTRACK_FILTER
		EOF
      fi
    else
      if [ -f $conntrack_reserved_proc ]; then
        echo 0 > $conntrack_reserved_proc
      fi
    fi

    cat >>$iptables <<-EOF
		-A POSTROUTING -j DYNAMICPOSTROUTING
		-A PREROUTING -j PARENTAL_CONTROL
EOF

    [ -f $MANGLE ] && cat <$MANGLE >>$iptables
    [ -f $PREROUTING ] && cat <$PREROUTING >>$iptables
    [ -f $POSTROUTING ] && cat <$POSTROUTING >>$iptables
    echo COMMIT >>$iptables
  else
    # No mangle table
    # but if kernel is not compiled with mangle table
    # We get an error in iptables-restore
    # So do the cleanup separately
    iptables-restore 2>/dev/null <<-EOF
			*mangle
			:PREROUTING ACCEPT [0:0]
			:INPUT ACCEPT [0:0]
			:FORWARD ACCEPT [0:0]
			:OUTPUT ACCEPT [0:0]
			:POSTROUTING ACCEPT [0:0]
			# parental control rules
			$create:PARENTAL_CONTROL - [0:0]
			-A PREROUTING -j PARENTAL_CONTROL
			# dynamic rules
			$create:DYNAMICPOSTROUTING - [0:0]
			-A POSTROUTING -j DYNAMICPOSTROUTING
			COMMIT
		EOF
  fi

  # filter table
  cat >>$iptables <<-EOF
		*filter
		# Default Policies
		:INPUT ACCEPT [0:0]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		-F INPUT
		-F OUTPUT
		-F FORWARD
		# Parental control rules
		$create:PARENTAL_CONTROL - [0:0]
		-A INPUT -j PARENTAL_CONTROL
		$create:APP_PARENTAL_CONTROL - [0:0]
		-A FORWARD -m mark ! --mark 0x0/0xf00 -j APP_PARENTAL_CONTROL
		# Device detection rules (TODO: use dynamic rules)
		$create:DD_RAVEN - [0:0]
		-A INPUT -j DD_RAVEN
		-A FORWARD -j DD_RAVEN
		# dynamic rules
		$create:DYNAMICINPUT - [0:0]
		-A INPUT -j DYNAMICINPUT
		# LOGDROP Table
		$create:LOGDROP - [0:0]
		-F LOGDROP
		$logdrop-A LOGDROP ! -p udp -m limit --limit 1/s -j LOG --log-prefix "## DISCARD ## " --log-level warning
		-A LOGDROP -j DROP
		# DOS Attacks Filter Table
		$create:FLOOD - [0:0]
		-F FLOOD
		-A FLOOD -m limit --limit 10/s --limit-burst 15 -j RETURN
		-A FLOOD -j LOGDROP
		$create:ATTACK-FILTER - [0:0]
		-F ATTACK-FILTER
		-A ATTACK-FILTER -m conntrack --ctstate INVALID -j LOGDROP
		-A ATTACK-FILTER -p tcp ! --syn -m state --state NEW -j LOGDROP
		-A ATTACK-FILTER -p tcp -m tcp --syn -j FLOOD
		-A ATTACK-FILTER -p icmp -m icmp --icmp-type echo-request -j FLOOD
		-A ATTACK-FILTER -p tcp --tcp-flags SYN,FIN SYN,FIN -j LOGDROP
		-A ATTACK-FILTER -p tcp --tcp-flags SYN,RST SYN,RST -j LOGDROP
		-A ATTACK-FILTER -p tcp --tcp-flags ALL FIN,URG,PSH -j LOGDROP
		-A ATTACK-FILTER -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j LOGDROP
		-A ATTACK-FILTER -p tcp --tcp-flags ALL FIN -j LOGDROP
		-A ATTACK-FILTER -p tcp --tcp-flags ALL NONE -j LOGDROP
		-A ATTACK-FILTER -p tcp --tcp-flags ALL ALL -j LOGDROP
		-A ATTACK-FILTER -f -j LOGDROP
		-A ATTACK-FILTER -j RETURN
		# Clamp MSS table
		$create:CLAMP-MSS - [0:0]
		-F CLAMP-MSS
	EOF
  i=0
  while [ $i -lt $WANConnectionDevice_Count ]; do
    i=$(($i + 1))
    cat >>$iptables <<-EOF
			$create:INPUT$i - [0:0]
			-F INPUT$i
		EOF
  done

  # Create conntrack filter table
  cat >>$iptables <<-EOF
		$create:CONNTRACK_FILTER - [0:0]
		-F CONNTRACK_FILTER
	EOF

  if [ $conntrackfilter -eq 1 ]; then
    local conntrack_reserved max_conn
    eval conntrack_reserved=${Conntrack_Filter_ReservedConnections:-0}
    eval max_conn=${Conntrack_MaxEntries:-0}
    if [ $conntrack_reserved -gt $max_conn ]; then
      conntrack_reserved=$max_conn
    fi
    cat >> $iptables <<-EOF
		-A INPUT -m conntrack --ctstate NEW -m connreserved -j CONNTRACK_FILTER
		-A FORWARD -m conntrack --ctstate NEW -m connreserved -j CONNTRACK_FILTER
		-A OUTPUT -m conntrack --ctstate NEW -m connreserved -j CONNTRACK_FILTER
	EOF

    local rulelist rule
    eval rulelist=${Conntrack_Filter_Rules_List:-}
    for rule in `strip $rulelist`; do
      local ruleen
      local myrule='Conntrack_Filter_Rules_'$rule
      eval ruleen=\${$myrule'_Enable':-0}
      if [ $ruleen -eq 1 ]; then
        local mark limit
        eval mark=\${$myrule'_Mark':-}
        eval limit=\${$myrule'_Limit':-}
        if [ "$mark" != "" ] && [ "$limit" != "" ]; then
          cat >> $iptables <<-EOF
		-A CONNTRACK_FILTER -m connmarklimit ! --marklimit $mark/$limit -j RETURN
		EOF
        fi
      fi
    done
    cat >> $iptables <<-EOF
	-A CONNTRACK_FILTER -j LOGDROP
	EOF
  fi

  # Create subchains in filter table
  create_subchains filter
  cat >>$iptables <<-EOF
		-A INPUT -i lo -j ACCEPT
		-A FORWARD -p tcp --tcp-flags SYN SYN -j CLAMP-MSS
		-A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
	EOF
  for i in `ls $WAND`; do
    local ifname=`cat $WAND/$i/ip/ifname 2>/dev/null`
    if [ "$ifname" != '' ]; then
      # Filter rules
      if [ -f "$WAND/$i/fw/filter" ]; then
        cat <$WAND/$i/fw/filter >>$iptables
        echo "-A INPUT -i $ifname -j INPUT$i" >>$iptables
      else
        echo "-A INPUT -i $ifname -j ACCEPT" >>$iptables
      fi
      # Clamp MSS rule
      local mtu=1500
      local ipmtu
      if [ -f $WAND/$i/ip/mtu ]; then
        ipmtu=`cat $WAND/$i/ip/mtu`
        [ "$ipmtu" -lt "$mtu" ] && mtu=$ipmtu
      fi
      if [ -f $WAND/$i/ip/mtu_negotiated ]; then
        ipmtu=`cat $WAND/$i/ip/mtu_negotiated`
        [ "$ipmtu" -lt "$mtu" ] && mtu=$ipmtu
      fi
      if [ "$mtu" -lt 1500 ]; then
        local mss=$(($mtu-40))
        cat >>$iptables <<-EOF
				-A CLAMP-MSS -o $ifname -p tcp -j TCPMSS --clamp-mss $mss
				-A CLAMP-MSS -i $ifname -p tcp -j TCPMSS --clamp-mss $mss
			EOF
      fi
    fi
  done
  # Insert additional extra rules if any : obsolete
  if [ -f '/var/bewan/dynamic-rules' ]; then
    cat </var/bewan/dynamic-rules >>$iptables
  fi

  # Global firewall Rules
  if [ -f $FIREWALL ]; then
    cat <$FIREWALL >>$iptables
  fi
  # Commit filter table
  echo COMMIT >>$iptables

  iptables-restore -n $iptables 2>&1 | base_log - debug

  # Now destroy old subchains with no more links
  destroy_subchains filter
  destroy_subchains mangle
  destroy_subchains nat
}

main_iptables() {
  eval $PUSH_ARG

  local iptables=/var/bewan/iptables

  check_iptables
  base_log "$INITD/iptables $ARG" debug

  case $ARG in
  stop)
    stop_iptables
    ;;
  start|restart)
    start_iptables
    ;;
  esac
}

main_iptables
