#!/bin/sh
# /etc/bewan/init.d/ntp $1
# $1 or $ARG = start stop restart

if [ "${ARG:-}" = "" ]; then
  . /etc/bewan/init.d/setparam
fi

# Include crontab library
if [ "${CRON_LIB:-0}" = 0 ] && [ -f /etc/bewan/lib/crontab ]; then
  . /etc/bewan/lib/crontab
fi

check_ntp() {
  local en=0
  if [ "$Services_Time_NTPEnable" = 1 ] && [ "$Services_Time_NTPServers" != '' ]; then
    en=1
  fi
  local enable="test x$en = x1"
  local active="test -f $ntpcmd"
  base_check_arg "$enable" "$active"
}

stop_ntp() {
  rm -rf $ntpdir
  if [ ${CRON_LIB:-0} = 1 ]; then
    crontab_remove ntpinit
    crontab_remove ntp
  fi
}

start_ntp() {
  mkdir -p $ntpdir
  local logger='/usr/bin/logger -t sntp -p daemon.debug'
  local servers="`strip $Services_Time_NTPServers`"
  [ "$iface" != '' ] && echo $iface >$ntpitf

  local srv
  rm -f $ntpcnf
  for srv in $servers; do
    echo server $srv >>$ntpcnf
  done

  # ntp synced status
  if [ ! -f $sync_status ]; then
    touch $sync_status
    echo "0" > $sync_status
  fi

  cat >$ntpcmd <<EOF
#!/bin/sh
# \$1: wan interface index
set -u
# Acquire the time change lock
$SCRIPTD/time-lock

# ntp synced status
local sync_status=$sync_status
if [ ! -f \$sync_status ]; then
  touch \$sync_status
  echo "0" > \$sync_status
fi

local dns=""

type=\${1:-0}
ix=\${2:-0}

if [ "\$type" = "wan" ]; then
  ipaddr=\`cat ${WAND:-}/\$ix/ip/ipaddr 2>/dev/null\`
  if [ "\$ipaddr" != "" ]; then
    ifname=\`cat ${WAND:-}/\$ix/ip/ifname 2>/dev/null\`
    resolv=\`cat ${WAND:-}/\$ix/ip/dnssrvlst 2>/dev/null\`
    for rsv in \$resolv; do
      dns="\$dns -r \$rsv"
    done
  fi
elif [ "\$type" = "lan" ]; then
  ipaddr=\`cat ${LAND:-}/\$ix/ip/ipaddr 2>/dev/null\`
  ifname=\`cat ${LAND:-}/\$ix/ifname 2>/dev/null\`
  if [ "\$ipaddr" != "" ]; then
    resolv=\`cat ${LAND:-}/\$ix/ip/servers 2>/dev/null\`
    if [ "\$resolv" = "" ]; then
      resolv=\`cat ${LAND:-}/\$ix/ip/routers 2>/dev/null\`
    fi
    for rsv in \$resolv; do
      dns="\$dns -r \$rsv"
    done
  fi
fi
  
if [ "\$ipaddr" != "" ]; then
  ntpd -1sdf $ntpcnf -i \$ifname \$dns -n \$sync_status 2>&1 | $logger
fi

# Release the time change lock
$SCRIPTD/time-unlock
exit 0
EOF
  chmod +x $ntpcmd

  if [ ${CRON_LIB:-0} = 1 ]; then
    # Put a daily NTP refresh in crontab
    local cmd='/etc/bewan/init.d/ntp refresh'
    local min=`random 0 59`
    local hour=`random 0 23`
    crontab_add $min $hour '*' '*' '*' "$cmd" ntp
    # Put in crontab a periodic refresh
    # every 2mn in the first month/year
    # until the date is updated
    local initdate=${Services_Time_InitialDate:-}
    if [ "$initdate" != '' ]; then
      local cmd='/etc/bewan/init.d/ntp init'
      local mon="`echo $initdate | cut -c3-4`"
      crontab_add '*/2' '*' '*' $mon '*' "$cmd" ntpinit
    fi
  fi
}

refresh_ntp() {
  [ ! -f $ntpcmd ] && return

  local dir type

  if [ "${Services_Time_NTPInterfaceType:-}" = "WANConnectionDevice" ]; then
    [ "$iface" = '' ] && iface=`cat ${WAND:-}/internet 2>/dev/null`
    dir=${WAND:-}
    type=wan
  else
    [ "$iface" = '' ] && return
    dir=${LAND:-}
    type=lan
  fi

  local ix
  for ix in `strip $iface`; do
    local ipaddr=`cat $dir/$ix/ip/ipaddr 2>/dev/null`
    if [ "$ipaddr" != '' ]; then
      start-stop-daemon -S -b -x $ntpcmd -- $type $ix
    fi
  done
}

init_ntp() {
  [ ${CRON_LIB:-0} = 0 ] && return
  local initdate=${Services_Time_InitialDate:-}
  local year1="`echo $initdate | cut -c9-12`"
  local year2=`date +%Y`
  if [ "$year1" != "$year2" ]; then
    crontab_remove ntpinit
    return
  fi
  refresh_ntp
}

main_ntp() {
  eval $PUSH_ARG

  local ntpdir='/var/bewan/ntp.d'
  local ntpcmd="$ntpdir/ntp.sh"
  local ntpcnf="$ntpdir/ntp.conf"
  local ntpitf="$ntpdir/interface"
  local iface="$Services_Time_NTPInterfaces"
  local ifacetype="$Services_Time_NTPInterfaceType"
  local sync_status='/var/bewan/ntp.d/synced'

  check_ntp
  base_log "$INITD/ntp $ARG" debug

  case $ARG in
  stop)
    stop_ntp
    ;;
  start)
    start_ntp
    ;;
  restart)
    stop_ntp
    start_ntp
    ;;
  init)
    init_ntp
    ;;
  esac

  # launch an NTP request if arg = restart or refresh
  # otherwise the script is called at ip-up time
  if [ "$TOP_ARG" = restart ] || [ "$TOP_ARG" = refresh ]; then
    refresh_ntp
  fi
}

main_ntp
