#!/bin/sh
# /etc/bewan/lib/wifi

# specific vendor functions used by wifi scripts
# setparam must be included

# Working variables
# $ETHID: WLANInterface index
# $ifname: name of wifi network interface
# $WIFID/$ifname: working directory of WIFI interface

if [ ${WIFI_LIB_LOADED:-0} -eq 1 ]; then
  return
fi

BCMINITRUNNING=
if base_enter_critical 'bcmwl-init' 'nowait'; then
  base_exit_critical 'bcmwl-init'
else
  BCMINITRUNNING=1
fi

# Uncomment the echo to debug commands
exec_cmd() {
#  echo $1 | base_log - debug
  $1 >/dev/null 2>/dev/null
}

# Allow editing wl.conf file
wl_conf_set() {
  #if [ "$ETHID" = 1 ]; then
    sed -i "s/^$1=.*/$1=$2/" $WIFID/wl.conf
  #fi
}

# Allow editing ssid#.conf file
ssid_conf_set() {
  sed -i "s/^$1=.*/$1=$2/" $WIFID/ssid$ETHID.conf
}

# Allow editing ssid#.conf file with special characters
ssid_conf_set_ascii() {
  # Delete the line
  sed -i "/$1/d" $WIFID/ssid$ETHID.conf
  # Add the line
  echo "$1=$2" >> $WIFID/ssid$ETHID.conf
}

# LED management
wifi_led_ctrl() {
  # Test if ledctl exists
  [ ! -f /usr/bin/ledctl ] && return

  # Stop WiFi LED blinking
  stop_wifi_blink

  # Set WiFi main LED interface and verify that it's the good WiFi interface
  local wlanid=`cat $led_cfg_file | grep led_main_interface_id | cut -d'=' -f2`
  [ $ETHID != $wlanid ] && return

  # Must save LED context for restore processing
  local led_save_file=$WIFID/wifi_led.save
  [ ! -f $led_save_file ] && {
    local old_blink_period=`ledctl g | cut -d' ' -f4`
    local old_pattern_period=`ledctl e | cut -d' ' -f4`
    touch $led_save_file
cat >> $led_save_file <<-EOF
blink_period=${old_blink_period}
pattern_period=${old_pattern_period}
EOF
  }

  # LED count
  local led_count=`cat $led_cfg_file | grep led_count | cut -d'=' -f2`

  # Period management
  local blink_period=`cat $led_cfg_file | grep blink_period | cut -d'=' -f2`
  local pattern_period=`cat $led_cfg_file | grep pattern_period | cut -d'=' -f2`
  ledctl G$blink_period && ledctl E$pattern_period

  # Get WiFi settings
  local wifienable; eval wifienable=\${'WLANInterface_'$wlanid'_Enable'}
  local wpamode; eval wpamode=\${'WLANInterface_'$wlanid'_Config_BeaconType'}
  local wepmode; eval wepmode=\${'WLANInterface_'$wlanid'_Config_WEPEncryption'}
  local final_cmd="true"

  # We proccess all LEDs
  local i=0; while [ $i -lt $led_count ]; do
    i=`expr $i + 1`
    local led_name=`cat $led_cfg_file | grep name_$i | cut -d'=' -f2`
    # We turn off the LED
    final_cmd=$final_cmd" && ledctl s$led_name"

    # WiFi disabled
    if [ $wifienable = 0 ] || [ $WLANConfig_Enable = 0 ] || [ $WLANConfig_RadioEnable = 0 ]; then
      local nowifi_state=`cat $led_cfg_file | grep nowifi_state_$i | cut -d'=' -f2`
      [ $nowifi_state = 1 ] && final_cmd=$final_cmd" && ledctl S$led_name"

    # WiFi enabled
    elif [ $wpamode = Basic ]; then
      case $wepmode in
        None)
          local noenc_state=`cat $led_cfg_file | grep noenc_state_$i | cut -d'=' -f2`
          [ $noenc_state = 1 ] && final_cmd=$final_cmd" && ledctl S$led_name"
          ;;
        *)
          local wep_state=`cat $led_cfg_file | grep wep_state_$i | cut -d'=' -f2`
          [ $wep_state = 1 ] && final_cmd=$final_cmd" && ledctl S$led_name"
          ;;
      esac
    else
      local wpa_state=`cat $led_cfg_file | grep wpa_state_$i | cut -d'=' -f2`
      [ $wpa_state = 1 ] && final_cmd=$final_cmd" && ledctl S$led_name"
    fi

    # Blink management
    local blink=`cat $led_cfg_file | grep blink_$i | cut -d'=' -f2`
    [ $wifienable = 1 ] && [ $WLANConfig_Enable = 1 ] && [ $WLANConfig_RadioEnable = 1 ] && [ $blink = 1 ] && final_cmd=$final_cmd" && ledctl b$led_name"

    # Pattern management
    local pattern=`cat $led_cfg_file | grep pattern_$i | cut -d'=' -f2`
    [ $wifienable = 1 ] && [ $WLANConfig_Enable = 1 ]  && [ $WLANConfig_RadioEnable = 1 ] && [ $pattern = 1 ] && {
      local pattern_value=`cat $led_cfg_file | grep pattern_value_$i | cut -d'=' -f2`
      final_cmd=$final_cmd" && ledctl B$led_name,$pattern_value"
    }
  done

  # Execute the command
  eval $final_cmd

  local blink_ontraffic=`cat $led_cfg_file | grep blink_ontraffic | cut -d'=' -f2`
  [ $WLANConfig_EasyPairing = 0 ] && [ $blink_ontraffic = 1 ] && [ $WLANConfig_Enable = 1 ] && [ $WLANConfig_RadioEnable = 1 ] && start_wifi_blink

  if [ $wifienable = 0 ] || [ $WLANConfig_Enable = 0 ] || [ $WLANConfig_RadioEnable = 0 ]; then
    # Restore LED context
    [ -f $led_save_file ] && {
      local old_blink_period=`cat $led_save_file | grep blink_period | cut -d'=' -f2`
      local old_pattern_period=`cat $led_save_file | grep pattern_period | cut -d'=' -f2`
      ledctl G$old_blink_period && ledctl E$old_pattern_period && rm $led_save_file
    }
  fi
}

# Start wifi_led_blink program (only if not already running)
start_wifi_blink() {
  [ ! -f /var/run/wifi_led_blink.pid ] && [ -f /bin/wifi_led_blink ] && {
    /bin/wifi_led_blink 2>&1 1>/dev/null &
  }
}

# Stop wifi_led_blink program (if running)
stop_wifi_blink() {
  [ -f /var/run/wifi_led_blink.pid ] && {
    killall -HUP wifi_led_blink 2>&1 1>/dev/null
    killall wifi_led_blink 2>&1 1>/dev/null
  }
}

# Refresh pairingd settings (if running)
reload_pairingd() {
  [ -f /var/run/pairingd.pid ] && {
    killall -HUP pairingd 2>&1 1>/dev/null
  }
}

# Refresh WiFi LEDs regarding settings (if pairingd running)
refresh_leds() {
  [ -f /var/run/wifi_led_mgmt.pid ] && {
    killall -HUP wifi_led_mgmt 2>&1 1>/dev/null
  }
}

# Set WiFi LEDs OFF (if pairingd running)
refresh_leds_off() {
  [ -f /var/run/wifi_led_mgmt.pid ] && {
    killall -USR1 wifi_led_mgmt 2>&1 1>/dev/null
  }
}

# Decrement wifionoff counters (if pairingd running and if wifionoff file exists)
decrement_onoff() {
  [ -f /var/run/pairingd.pid ] && [ -f $WIFID/wifionoff ] && {
    killall -USR1 pairingd 2>&1 1>/dev/null
  }
}

check_vendor_wifi() {
  if [ "$ifname" = '' ]; then
    ARG=nothing
    return
  fi

  if ! find /lib/modules -type f -name wl.ko |grep -q /extra/; then
    ARG=nothing
    return
  fi

  if [ ! -f /bin/wlmngr ]; then
    ARG=nothing
    return
  fi
}

restart_vendor_wifi() {
  stop_vendor_wifi
  start_vendor_wifi
}

stop_vendor_wifi() {
  rm -rf $INTFD/$ifname

  # Disable SSID
  local en; eval en=\${'WLANInterface_'$ETHID'_Enable':-0}
  [ $en = 0 ] || [ $WLANConfig_Enable = 0 ] && ssid_conf_set wlEnblSsid 0

  # LED management
  local led_cfg_file=/etc/bewan/config.default/wifi_led.cfg

  # Switch LED off if no enabled WiFi interfaces
  local has_intf_enabled=0
  local i=0; while [ $i -lt $WLANInterface_Count ]; do
    i=$(($i + 1))
    eval en=\${'WLANInterface_'$i'_Enable'}
    [ $en = 1 ] && has_intf_enabled=1 && break
  done

  [ $ARG = stop ] && {
    [ $has_intf_enabled = 0 ] || [ $WLANConfig_Enable = 0 ] && {
      # Refresh LED states
      if [ $WLANConfig_EasyPairing = 0 ]; then
        wifi_led_ctrl
      else
        [ ! -f $WIFID/wifionoff ] && refresh_leds_off
      fi
    }
    # Launch wl manager again
    [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null
  }

  # Decrement wifionoff
  decrement_onoff

  # Reload pairingd settings
  reload_pairingd
}

start_vendor_wifi() {

  mkdir $INTFD/$ifname

  # Reload pairingd settings
  reload_pairingd

  # Decrement wifionoff
  decrement_onoff

  # LED management
  local led_cfg_file=/etc/bewan/config.default/wifi_led.cfg

  [ ! -f $WIFID/wl.conf ] && cp /etc/bewan/config.default/wl.conf $WIFID/wl.conf
  [ ! -f $WIFID/ssid$ETHID.conf ] && cp /etc/bewan/config.default/ssid.conf $WIFID/ssid$ETHID.conf

  # Create wifi_boot file
  exec_cmd "touch $WIFID/wifi_boot"

  # Start easyp only if pairingd is not running
  [ ! -f /var/run/pairingd.pid ] && base_call_initd 'easyp'

  # Refresh LED states
  if [ $WLANConfig_EasyPairing = 0 ]; then
    wifi_led_ctrl
  else
    # Force LED mgmt for a faster LED mgmt (only if EasyPairing isn't running)
    [ ! -f /var/run/pairingd.pid ] && wifi_led_ctrl
    [ ! -f $WIFID/wifionoff ] && [ ! -f $WIFID/wifiwps ] && refresh_leds
  fi
  local macaddr=`pzinfo lanmac`
  local lq_mac; eval lq_mac=\${'WLANInterface_'$ETHID'_MacOffset'}
  local i; for i in `strip $lq_mac`; do
    macaddr=`macoffset $i $macaddr`
  done
  # Set MAC address only once and for the wl0 interface
  /sbin/ifconfig wl0 | grep UP 2>&1 1>/dev/null
  [ $? = 1 ] && /sbin/ifconfig wl0 hw ether $macaddr 
  ssid_conf_set_ascii wlWscAuthoStaMac "$macaddr" 
  # Enable SSID
  ssid_conf_set wlEnblSsid 1

  # LAN number
  local i=0; while [ $i -lt $LANDevice_Count ]; do
    i=$(($i + 1))
    local wlandevice; eval wlandevice=\${'LANDevice_'$i'_WLANInterface_'$ETHID'_Enable'}
    [ $wlandevice = 1 ] && ssid_conf_set wlBrName lan$i && break
  done

  # Choose country
  touch $WIFID/nowlmngr
  local ARG=restart
  base_call_initd 'wificountry'
  rm $WIFID/nowlmngr

  wl_conf_set wlMode ap

  touch $WIFID/nowlmngr
  local ARG=restart
  base_call_initd 'wificom'
  rm $WIFID/nowlmngr

  # Set DTIM period
  local dtim; eval dtim=\${'WLANInterface_'$ETHID'_Config_DTIMPeriod'}
  [ "$ETHID" = 1 ] && wl_conf_set wlDtmIntvl $dtim
  
  # Hide SSID
  local hidessid; eval hidessid=\${'WLANInterface_'$ETHID'_Config_HideSSID':-0}
  ssid_conf_set wlHide $hidessid

  # Set RTS and Fragment thresholds
  local rtsthreshold; eval rtsthreshold=\${'WLANInterface_'$ETHID'_Config_RTSThreshold':-2347}
  [ "$ETHID" = 1 ] && wl_conf_set wlRtsThrshld $rtsthreshold
  local fragthreshold; eval fragthreshold=\${'WLANInterface_'$ETHID'_Config_FragThreshold':-2346}
  [ "$ETHID" = 1 ] && wl_conf_set wlFrgThrshld $fragthreshold

  local beacontype; eval beacontype=\${'WLANInterface_'$ETHID'_Config_BeaconType'}
  local wepencrypt; eval wepencrypt=\${'WLANInterface_'$ETHID'_Config_WEPEncryption'}
  local wpaencrypt; eval wpaencrypt=\${'WLANInterface_'$ETHID'_Config_WPAEncryption'}
  local wlwep=disabled
  local wlauth=0
  local wlauthmode=open
  local wlwpa
  case $beacontype in
    Basic)
      case $wepencrypt in
        None)
          wlwep=disabled; wlauth=0;;
        WEP-Open)
          wlwep=enabled; wlauth=0;;
        WEP-PSK)
          wlwep=enabled; wlauth=1;;
        WEP-AUTO)
          wlwep=enabled; wlauth=0;;
      esac
      ;;
    WPA)
      wlauthmode=psk;;
    WPA2)
      wlauthmode=psk2;;
    WPA-Auto)
      # Not sure we need this really old stuff ...
      # the option is different regarding the driver version
      if wlctl ver | grep 4.174.64.19.cpe4.402.1; then
        wlauthmode=psk2mix
      else
        wlauthmode='psk psk2'
      fi
      ;;
  esac
  case $wpaencrypt in
    TKIP)
      wlwpa=tkip;;
    AES)
      wlwpa=aes;;
    Auto)
      wlwpa=tkip+aes;;
  esac
  ssid_conf_set wlWep $wlwep;
  ssid_conf_set wlAuth $wlauth;
  ssid_conf_set wlAuthMode "$wlauthmode";
  ssid_conf_set wlWpa $wlwpa;

  # Erase all WEP Keys
  local i; for i in 1 2 3 4; do
    ssid_conf_set wlKey64_$i ""
    ssid_conf_set wlKey128_$i ""
  done
  # Set the good WEP key
  local idx; eval idx=\${'WLANInterface_'$ETHID'_Config_WEPKeyIndex'}
  local wepkey; eval wepkey=\${'WLANInterface_'$ETHID'_Config_WEPKey'$idx''}
  wepkey=$( base_get_password $wepkey )
  i=$(($idx - 1))
  [ ${#wepkey} = 5 ] || [ ${#wepkey} = 10 ] && ssid_conf_set wlKey64_$idx $wepkey && ssid_conf_set wlKeyBit 1 && ssid_conf_set wlKeyIndex64 $i
  [ ${#wepkey} = 13 ] || [ ${#wepkey} = 26 ] && ssid_conf_set wlKey128_$idx $wepkey && ssid_conf_set wlKeyBit 0 && ssid_conf_set wlKeyIndex128 $i

  # Select MaxBitRate
  local maxrate; eval maxrate=\${'WLANInterface_'$ETHID'_Config_MaxBitRate':-0}
  [ $maxrate = Auto ] && maxrate=0
  maxrate=`echo $maxrate | sed -e 's~M~~'`
  [ "$ETHID" = 1 ] && wl_conf_set wlRate $maxrate

  # Rekeying period
  local rekey; eval rekey=\${'WLANInterface_'$ETHID'_Config_RekeyingPeriod':-0}
  ssid_conf_set wlWpaGTKRekey $rekey

  # WPA KEY
  local key; eval key=\${'WLANInterface_'$ETHID'_Config_WPADefaultKey'}
  key=$( base_get_password $key )
  ssid_conf_set_ascii wlWpaPsk "$key"

  # SSID
  local ssid; eval ssid=\${'WLANInterface_'$ETHID'_Config_SSID'}
  ssid_conf_set_ascii wlSsid "$ssid"

  # WMM
  local wmmen; eval wmmen=\${'WLANInterface_'$ETHID'_WMMEnable':-0}
  if [ $wmmen = 1 ]; then
    [ "$ETHID" = 1 ] && wl_conf_set wlWme $wmmen
    ssid_conf_set wlDisableWme 0
  else
    [ "$ETHID" = 1 ] && wl_conf_set wlWme $wmmen
    ssid_conf_set wlDisableWme 1
  fi
  local wmmpsen; eval wmmpsen=\${'WLANInterface_'$ETHID'_WMMPSEnable':-0}
  [ "$ETHID" = 1 ] && wl_conf_set wlWmeApsd $wmmpsen
  
  if [ "$ETHID" = 1 ]; then
    wl_conf_set wlNMcsidx -1
    wl_conf_set wlStbcTx -1
    wl_conf_set wlRegMode 2
  fi
  ssid_conf_set_ascii wlWscRestart Y

  # WPS
  local wpsen; eval wpsen=\${'WLANInterface_'$ETHID'_WPSEnable':-0}
  local wpspin; eval wpspin=\${'WLANInterface_'$ETHID'_Config_WPSPINCode':-0}
  local wpsmethod; eval wpsmethod=\${'WLANInterface_'$ETHID'_WPSMethod':-"PIN"}
  if [ $wpsen = 1 ]; then
    # Disable WPS if in WEP (Bouygues request)
    # if [ $beacontype = Basic ] && [ $wepencrypt != None ]; then
    #  ssid_conf_set wsc_mode disabled
    #  ssid_conf_set wsc_config_state 0
    # else
    if [ $wpsmethod = "PIN" ] ; then
      ssid_conf_set_ascii wlWscConfig "client-pin"
      ssid_conf_set_ascii wlWscStaPin "$wpspin"
    else
      ssid_conf_set_ascii wlWscConfig "client-pbc"
    fi
      ssid_conf_set wsc_mode enabled
      ssid_conf_set wsc_config_state 1
    # fi
  else
    ssid_conf_set wsc_mode disabled
    ssid_conf_set wsc_config_state 0
  fi

  # AP Isolation
  local apisol; eval apisol=\${'WLANInterface_'$ETHID'_IsolateSTA':-0}
  ssid_conf_set wlAPIsolation $apisol

  local maxusers; eval maxusers=\${'WLANInterface_'$ETHID'_Config_MaxUsers':-0}
  if [ $maxusers != 0 ]; then
    ssid_conf_set wlMaxAssoc $maxusers
    [ "$ETHID" = 1 ] && wl_conf_set wlGlobalMaxAssoc $maxusers
  else
    ssid_conf_set wlMaxAssoc ""
    [ "$ETHID" = 1 ] && wl_conf_set wlGlobalMaxAssoc ""
  fi

  mkdir -p $INTFD/$ifname
  touch $INTFD/$ifname/wifi
  echo `/sbin/macaddr $ifname` >$INTFD/$ifname/macaddr

  # Program the MAC@ Access Control
  local aclen; eval aclen=\${'WLANInterface_'$ETHID'_ACLEnable':-0}
  [ $aclen = 1 ] && {
    touch $INTFD/$ifname/aclen
  }
  [ $TOP_ARG = restart ] && {
    touch $WIFID/nowlmngr
    base_call_initd 'wifiacl'
    rm $WIFID/nowlmngr
  }

  # Launch wl manager
  [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null

  # Radio control
#  base_call_initd 'wifiradio'
  if [ $WLANConfig_RadioEnable = 1 ]; then
    wlctl radio on
  else
    wlctl radio off
  fi
  
  [ -z "$BCMINITRUNNING" ] && {
  # Need to scan the LANs to Add or Remove the interface
  # to the LAN bridge if this interface belongs to it.
  local lanid; for lanid in `ls $LAND`; do
    local intf; for intf in `cat $LAND/$lanid/intfs`; do
      [ $intf = $ifname ] && {
        local LANID=$lanid
        local ETHNAME=$ifname
        base_call_initd 'lanif'
      }
    done
  done
  }
  # Remove wifi_boot file
  exec_cmd "rm $WIFID/wifi_boot"
}

restart_vendor_wifiacl() {
  rm -f $INTFD/$ifname/aclen
  rm -f $WIFID/flt$ETHID.conf

  local en; eval en=\${'WLANInterface_'$ETHID'_Enable':-0}
  if [ $en = 1 ]; then
    local aclen; eval aclen=\${'WLANInterface_'$ETHID'_ACLEnable':-0}
    if [ $aclen = 1 ]; then
      ssid_conf_set wlFltMacMode allow
      touch $INTFD/$ifname/aclen
      local lanid; for lanid in `ls $LAND`; do
        local intf; for intf in `cat $LAND/$lanid/intfs`; do
          [ $intf = $ifname ] && {
            cp $LAND/$lanid/macacl $WIFID/flt$ETHID.conf
          }
        done
      done
    else
      ssid_conf_set wlFltMacMode disabled
      rm -f $WIFID/flt$ETHID.conf
    fi
  fi
  #ssid_conf_set_ascii wlWscRestart Y
  # Launch wl manager
  [ ! -f $WIFID/nowlmngr ] && [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null

  # Reload pairingd settings
  reload_pairingd
}

stop_vendor_lanacl() {
  rm -rf $LAND/$LANID/macacl

  local i=0; while [ $i -lt $WLANInterface_Count ]; do
    i=$(($i + 1))
    local ARG=restart
    local ETHID=$i
    base_call_initd 'wifiacl'
  done

  # Reload pairingd settings
  reload_pairingd
}

start_vendor_lanacl() {
  local landev; landev='LANDevice_'$LANID
  local list; eval list=\${$landev'_AccessControl_List':-empty}

  # Build the Access Control List for network interfaces
  if [ $list != empty ]; then
    local acl=''
    local i; for i in `strip $list`; do
      local macen; eval macen=\${$landev'_AccessControl_'$i'_Enable':-0}
      local macaddr; eval macaddr=\${$landev'_AccessControl_'$i'_MACAddress'}
      [ $macen = 1 ] && {
        if [ "$acl" = '' ]; then
          acl="$macaddr"
        else
          acl="$acl\n$macaddr"
        fi
      }
    done
    echo $acl >$LAND/$LANID/macacl
  fi

  touch /var/tmp/nowlmngr
  i=0; while [ $i -lt $WLANInterface_Count ]; do
    i=$(($i + 1))
    local lanwlen; eval lanwlen=\${$landev'_WLANInterface_'$i'_Enable':-0}
    if [ $lanwlen = 1 ]; then
      local ARG=restart
      local ETHID=$i
      base_call_initd 'wifiacl'
    fi
  done
  rm /var/tmp/nowlmngr

  # Speed up at first start
  if [ $TOP_ARG = start ]; then
    local last_lanid_enabled=0
    i=$LANDevice_Count; while [ $i -gt 0 ]; do
      local en; eval en=\${'LANDevice_'$i'_Enable':-0}
      [ $en = 1 ] && last_lanid_enabled=$i && break
      i=$(($i - 1))
    done
    # Launch wl manager
    [ $last_lanid_enabled = $LANID ] && [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null
  else
    # Launch wl manager
    [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null
  fi
}


restart_vendor_wificom() {
  # Set 802.11 standard
  # Select first enabled WiFi interface
  local i en ifen
  i=0; while [ $i -lt $WLANInterface_Count ]; do
    i=`expr $i + 1`
    eval en=\${'WLANInterface_'$i'_Enable'}
    [ $en = 1 ] && eval ifen=\${'WLANInterface_'$i'_Ifname'} && break
  done
  local ETHID=$i
  local ifname=$ifen

  wlctl down
  local standard; standard=$WLANConfig_Standard;
  local btype; eval btype=\${'WLANInterface_'$ETHID'_Config_BeaconType'};
  local wepenc; eval wepenc=\${'WLANInterface_'$ETHID'_Config_WEPEncryption'};
  if [ $standard = "Auto" ] || [ $standard = "11bgn" ] || [ $standard = "11gn" ] || [ $standard = "11n" ]; then
    if [ $btype = "WPA" ]; then
        standard="11bg";
    elif [ $btype = "Basic" ] && [ $wepenc != "None" ]; then
        standard="11bg";
    fi
  fi
  case $standard in
    11bg)
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 1
      wl_conf_set wlNmode off
      wl_conf_set wlNReqd 0
      ;;
    11b)
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 0
      wl_conf_set wlNmode off
      wl_conf_set wlNReqd 0
      ;;
    11a)
      wl_conf_set wlBand 0
      wl_conf_set wlgMode 1
      wl_conf_set wlNmode off
      wl_conf_set wlNReqd 0
      ;;
    11g)
      wl_conf_set wlBand 2 
      wl_conf_set wlgMode 4 # Performance ???
      wl_conf_set wlNmode off
      wl_conf_set wlNReqd 0
      ;;
    11n)
      wl_conf_set wlNmode 1
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 1 
      wl_conf_set wlNReqd 1
      ;;
    11gn)
      wl_conf_set wlNmode 1
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 4
      wl_conf_set wlNReqd 0
      ;;
    11an)
      wl_conf_set wlNmode 1
      wl_conf_set wlBand 0
      wl_conf_set wlgMode 1
      wl_conf_set wlNReqd 0
      ;;
    11bgn)
      wl_conf_set wlNmode 1
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 1
      wl_conf_set wlNReqd 0
      ;;
    Auto)
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 1
      wl_conf_set wlNmode 1 
      wl_conf_set wlNReqd 0
      ;;
    *)
      wl_conf_set wlBand 2
      wl_conf_set wlgMode 1
      wl_conf_set wlNmode 1 
      wl_conf_set wlNReqd 0
      ;;
  esac
  
  if [ $WLANConfig_Bandwidth = "20" ]; then
    wl_conf_set wlNBw 20
    wl_conf_set wlNBwCap 0
    wl_conf_set wlObssCoex 0
  elif [ $WLANConfig_Bandwidth = "40" ]; then
    wl_conf_set wlNBw 40
    wl_conf_set wlNBwCap 1
    wl_conf_set wlObssCoex 0
  else
    wl_conf_set wlNBw 40
    wl_conf_set wlNBwCap 1
    wl_conf_set wlObssCoex 1
  fi
  
  # Program the Beacon Interval
  local bintval; bintval=${WLANConfig_BeaconInterval:-100}
  wl_conf_set wlBcnIntvl $bintval

  # Change Channel
  local channelval; channelval=$WLANConfig_Channel
  wl_conf_set wlChannel $channelval
  if [ $channelval -ge 1 -a $channelval -le 5 ]; then
    wl_conf_set wlNCtrlsb -1
  else
    wl_conf_set wlNCtrlsb 1
  fi
  # Percent
  local TxPower; TxPower=${WLANConfig_TxPower:-100}
  wl_conf_set wlTxPwrPcnt $TxPower


  # Diversity management
  local txant rxant
  if [ $WLANConfig_DiversityEnable = 1 ]; then
    txant=3
    rxant=3
  else
    if [ $WLANConfig_TxAntenna = Ant1 ]; then
      txant=0
    elif [ $WLANConfig_TxAntenna = Ant2 ]; then
      txant=1
    else
      txant=3
    fi
    if [ $WLANConfig_RxAntenna = Ant1 ]; then
      rxant=0
    elif [ $WLANConfig_RxAntenna = Ant2 ]; then
      rxant=1
    else
      rxant=3
    fi
  fi
  wlctl txant $txant
  wl_conf_set wlAntDiv $rxant
  ssid_conf_set_ascii wlWscRestart Y
  # Launch wl manager
  [ ! -f $WIFID/nowlmngr ] && [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null

  # Reload pairingd settings
  reload_pairingd
}


restart_vendor_wificountry() {
  local country_str=`sed /etc/bewan/config.default/ISO_3166-1_numeric -n -e "s/^$WLANConfig_Country \(.*\)$/\1/p"`

  wl_conf_set wlCountry $country_str
  ssid_conf_set_ascii wlWscRestart Y
  # Launch wl manager
  [ ! -f $WIFID/nowlmngr ] && [ -z "$BCMINITRUNNING" ] && /bin/wlmngr 2>&1 1>/dev/null
}


restart_vendor_wpspincode() {

 # Reload pairingd settings
  reload_pairingd

  local wpsenable; eval wpsenable=\${'WLANInterface_'$ETHID'_WPSEnable':-0}
  local wpsmethod; eval wpsmethod=\${'WLANInterface_'$ETHID'_WPSMethod':-"PIN"}
  if [ $wpsenable = 1 ]; then
	if [ $wpsmethod = "PIN" ]; then
      local wpspin; eval wpspin=\${'WLANInterface_'$ETHID'_Config_WPSPINCode':-0}
      ssid_conf_set_ascii wlWscConfig "client-pin"
      ssid_conf_set_ascii wlWscStaPin "$wpspin"
      if [ "$wpspin" != "" ]; then
        echo "PAIRINGD_WIFI_WPS_START $wpspin" > $WIFID/pairingd_fifo
      fi
	  ssid_conf_set wsc_mode enabled
	  ssid_conf_set wsc_config_state 1
	  # Launch wl manager
	  base_log "launching wl manager " debug
	  ssid_conf_set_ascii wlWscRestart N
	  /bin/wlmngr 2>&1 1>/dev/null
    fi
  fi	
}

restart_vendor_wifiradio() {
  # LED management
  local led_cfg_file=/etc/bewan/config.default/wifi_led.cfg
  # Force ETHID to main interface id
  local ETHID=`cat $led_cfg_file | grep led_main_interface_id | cut -d'=' -f2`

  if [ $WLANConfig_RadioEnable = 1 ]; then
    wlctl radio on
    # Refresh LED states
    if [ $WLANConfig_EasyPairing = 0 ]; then
      wifi_led_ctrl
    else
      # Force LED mgmt for a faster LED mgmt (only if EasyPairing isn't running)
      [ ! -f /var/run/pairingd.pid ] && wifi_led_ctrl
      [ ! -f $WIFID/wifionoff ] && [ ! -f $WIFID/wifiwps ] && refresh_leds
    fi
  else
    wlctl radio off
    # Refresh LED states
    if [ $WLANConfig_EasyPairing = 0 ]; then
      wifi_led_ctrl
    else
      [ ! -f $WIFID/wifionoff ] && refresh_leds_off
    fi
  fi

  # Reload pairingd settings
  reload_pairingd
}

WIFI_LIB_LOADED=1
